{"version":3,"sources":["Chart.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["TwoLevelPieChart","exportSVG","element","svg","XMLSerializer","serializeToString","prevProps","this","props","console","log","document","getElementsByClassName","val","getElementById","id","className","cx","cy","outerRadius","width","height","data","subject","A","eye","B","fullMark","hand","head","mouse","leg","mental","verticalAlign","iconType","wrapperStyle","marginTop","dataKey","name","stroke","fill","fillOpacity","React","Component","style","border","backgroundColor","Canvas","canvas","state","drawing","refs","getContext","ctx","image","Image","src","btoa","unescape","encodeURIComponent","onload","font","textBaseline","drawImage","fillText","setState","toDataURL","nextProps","test","ref","onMouseUp","onClick","href","download","Date","getTime","useStyles","makeStyles","theme","root","margin","spacing","marks","value","divStyle","overflowY","borderRadius","App","useState","eyeCount","handCount","headCount","mouseCount","legCount","mentalCount","setName","setSvg","classes","sentSvg","type","onChange","event","target","Typography","gutterBottom","Slider","defaultValue","max","getAriaValueText","aria-labelledby","step","valueLabelDisplay","url","options","text","via","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.069fc34c.chunk.js","sourcesContent":["import React, { ReactDOM, useState } from \"react\";\nimport {\n  Radar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Legend\n} from \"recharts\";\n\nclass TwoLevelPieChart extends React.Component {\n  exportSVG = element => {\n    const svg = element;\n    const oSerializer = new XMLSerializer();\n    const svgString = oSerializer.serializeToString(svg);\n    return svgString;\n    // generateLink(fileName + '.svg', 'data:image/svg+xml;utf8,' + svgString).click();\n  };\n\n  componentDidUpdate(prevProps) {\n    // 典型的な使い方(props を比較することを忘れないでください)\n    if (this.props !== prevProps) {\n      //   console.log(this.exportSVG(document.getElementById(\"tes\")));\n      console.log(document.getElementsByClassName(\"katagaki\"));\n      this.props.val(this.exportSVG(document.getElementById(\"tes\")));\n    }\n  }\n\n  render() {\n    return (\n      <RadarChart\n        id=\"tes\"\n        className=\"App\"\n        cx={300}\n        cy={250}\n        outerRadius={150}\n        width={600}\n        height={450}\n        data={[\n          { subject: \"目\", A: this.props.eye, B: 110, fullMark: 150 },\n          { subject: \"手\", A: this.props.hand, B: 130, fullMark: 150 },\n          { subject: \"頭\", A: this.props.head, B: 130, fullMark: 150 },\n          { subject: \"口\", A: this.props.mouse, B: 100, fullMark: 150 },\n          { subject: \"足\", A: this.props.leg, B: 90, fullMark: 150 },\n          { subject: \"心\", A: this.props.mental, B: 85, fullMark: 150 }\n        ]}\n      >\n        <Legend\n          id=\"katagaki\"\n          verticalAlign={\"center\"}\n          iconType={\"star\"}\n          wrapperStyle={{\n            marginTop: \"24px\"\n          }}\n        />\n        <PolarGrid />\n        <PolarAngleAxis dataKey=\"subject\" />\n        <Radar\n          name={this.props.name}\n          dataKey=\"A\"\n          stroke=\"#8884d8\"\n          fill=\"#8884d8\"\n          fillOpacity={0.6}\n        ></Radar>\n      </RadarChart>\n    );\n  }\n}\n\nexport default TwoLevelPieChart;\n","import React, { Component } from \"react\";\n\nconst style = {\n  border: \"1px solid gray\",\n  backgroundColor: \"white\"\n};\n\nclass Canvas extends Component {\n  constructor() {\n    super();\n    this.state = { drawing: \"\" };\n  }\n\n  canvas = document.getElementById(\"canvas\");\n\n  getContext() {\n    return this.refs.canvas.getContext(\"2d\");\n  }\n  //   ctx = this.getContext();\n  //   image = new Image();\n\n  test() {\n    const ctx = this.getContext();\n    const image = new Image();\n    image.src =\n      \"data:image/svg+xml;charset=utf-8;base64,\" +\n      btoa(unescape(encodeURIComponent(this.props.svg)));\n\n    image.onload = () => {\n      // SVGデータをPNG形式に変換する\n      ctx.font = \"24px serif\";\n      ctx.textBaseline = \"hanging\";\n      ctx.drawImage(image, 0, 0, image.width, image.height);\n      ctx.fillText(this.props.name, 40, 50);\n\n      var canvas = document.getElementById(\"canvas\");\n      this.setState({ drawing: canvas.toDataURL() });\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.svg !== nextProps) {\n      this.test();\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <canvas\n          id=\"canvas\"\n          ref=\"canvas\"\n          width=\"600px\"\n          height=\"450px\"\n          onMouseUp={() => {\n            // this.test();\n          }}\n          style={style}\n        />\n        <a\n          onClick={() => {}}\n          href={this.state.drawing}\n          download={new Date().getTime() + \".png\"}\n        >\n          <div className=\"box\">\n            <h2 className=\"title\">画像をダウンロード</h2>\n          </div>\n        </a>\n      </>\n    );\n  }\n}\nexport default Canvas;\n","import \"./App.css\";\nimport React, { ReactDOM, useState, useEffect } from \"react\";\n\nimport TwoLevelPieChart from \"./Chart\";\nimport Canvas from \"./Canvas\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n// import saveSvgAsPng from \"../node_modules/save-svg-as-png/lib/saveSvgAsPng\";\n// var XMLParser = require(\"react-xml-parser\");\nimport { TwitterShareButton } from \"react-twitter-embed\";\n\n//----------------スライダー関連\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 200,\n    margin: \"auto\"\n  },\n  margin: {\n    height: theme.spacing(3)\n  }\n}));\nconst marks = [\n  {\n    value: 0\n  }\n];\nconst divStyle = {\n  overflowY: \"scroll\",\n  border: \"1px solid grey\",\n  borderRadius: \"3px\",\n  width: \"500px\",\n  height: \"200px\",\n  margin: \"auto\"\n};\n\nconst centerStyle = {\n  display: \"flex\",\n  justifyContent: \"center\"\n};\n//-------------------------------スライダー関連\n\nfunction App() {\n  const [eye, eyeCount] = useState(90);\n  const [hand, handCount] = useState(90);\n  const [head, headCount] = useState(90);\n  const [mouse, mouseCount] = useState(90);\n  const [leg, legCount] = useState(90);\n  const [mental, mentalCount] = useState(90);\n  const [name, setName] = useState(\"肩書き\");\n  const [svg, setSvg] = useState(\"\");\n\n  const classes = useStyles();\n\n  const handleChange = event => {\n    setName(event.target.value);\n    console.log(name);\n  };\n\n  const handleSvg = sentSvg => {\n    setSvg(sentSvg);\n    console.log(svg);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <TwoLevelPieChart\n          id=\"testes\"\n          eye={eye}\n          hand={hand}\n          head={head}\n          mouse={mouse}\n          leg={leg}\n          mental={mental}\n          name={name}\n          val={handleSvg}\n        />\n\n        {/* //--------------------- スライダー関連*/}\n        {/* <div style={centerStyle}> */}\n        <div style={divStyle}>\n          <div className={classes.root}>\n            <label>\n              Name:\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n              />\n            </label>\n\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              目\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                eyeCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              手\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                handCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              頭\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                headCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              口\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                mouseCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              足\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                legCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              心\n            </Typography>\n            <Slider\n              defaultValue={90}\n              max={120}\n              getAriaValueText={value => {\n                mentalCount(value);\n              }}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n            />\n          </div>\n        </div>\n        {/* </div> */}\n        <Canvas svg={svg} name={name} />\n        <TwitterShareButton\n          url={\"https://d00fy.github.io/hosting-react/\"}\n          options={{ text: \"デザインチャート\", via: \"uchibashi\" }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}